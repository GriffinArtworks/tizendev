#!/usr/bin/env python

import sys
import argparse

def parse_arguments():
    parser = argparse.ArgumentParser(
            description="Generate xmacro with sine-motion along one axis.")
    parser.add_argument('x1', help="startpoint x-coord", type=int)
    parser.add_argument('y1', help="startpoint y-coord", type=int)
    parser.add_argument('x2', help="endpoint x-coord", type=int)
    parser.add_argument('y2', help="endpoint y-coord", type=int)
    parser.add_argument('-t', '--tick',
            help="tick between events in seconds (0.010)",
            type=float, default=0.010)
    parser.add_argument('-e', '--end-delay',
            help="duration to wait after the end of motion (0s)",
            type=float, default=0.0)
    parser.add_argument('-d', '--duration',
            help="duration of the movement in seconds (1s)", type=float, default=1.0)
    parser.add_argument('-r', '--repeat',
            help="How many times to repeat the whole thing (1)",
            type=int, default=1)

    args = parser.parse_args()

    args.number_of_ticks = int(args.duration / args.tick)

    return args

def calculate_coordinates(args, tick):
    
    x = round(args.x1 + (args.x2 - args.x1)*(float(tick)/args.number_of_ticks))
    y = round(args.y1 + (args.y2 - args.y1)*(float(tick)/args.number_of_ticks))
    return x, y

def generate_macro(args):
    print "MotionNotify %d %d" % calculate_coordinates(args, 0)
    print "ButtonPress 1"

    for tick in range(1, args.number_of_ticks + 1):
        x, y = calculate_coordinates(args, tick)
        print "MotionNotify %d %d" % (x, y)
        print "Delay %.3f" % args.tick

    print "ButtonRelease 1"
    if args.end_delay > 0.0:
        print "Delay %.3f" % args.end_delay


def main():
    args = parse_arguments()
    
    print "#generated_with:_" + "_".join(sys.argv)
    for i in range(args.repeat):
        generate_macro(args)

main()
